version: "3.9"

services:
    server:
        container_name: server_container
        build:
          context: .
          dockerfile: Dockerfile
        depends_on:
            postgres:
                condition: service_started
            redis:
                condition: service_started
            rabbitmq:
                condition: service_healthy
        env_file:
          - .env
        ports:
            - "8080:8080"
        volumes:
            - .:/app
        networks:
            - elastic
        healthcheck:
            test: ["CMD", "curl", "-f", "http://localhost:8080/ping"]
            interval: 10s
            timeout: 5s
            retries: 5
            
    postgres:
        container_name: postgres_container
        image: postgres:latest
        env_file:
          - .env
        volumes:
            - data:/var/lib/postgresql/data
        ports:
            - "5432:5432"
        networks:
            - elastic

    redis:
        container_name: redis_container
        image: redis:latest
        env_file:
          - .env
        ports:
            - "6379:6379"
        volumes:
            - redis:/data
        networks:
            - elastic
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 10s
            timeout: 5s
            retries: 5

    rabbitmq:
        image: "rabbitmq:management"
        container_name: rabbitmq_container
        env_file:
          - .env
        ports:
            - "5672:5672" 
            - "15672:15672"
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        networks:
            - elastic
        healthcheck:
            test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s

    # # ELK Stack
    # setup:
    #     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    #     volumes:
    #         - certs:/usr/share/elasticsearch/config/certs
    #     user: "0"
    #     command: >
    #         bash -c '
    #             if [ x${ELASTIC_PASSWORD} = x ]; then
    #                 echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
    #                 exit 1;
    #             elif [ x${KIBANA_PASSWORD} = x ]; then
    #                 echo "Set the KIBANA_PASSWORD environment variable in the .env file";
    #                 exit 1;
    #             fi;
    #             if [ ! -f config/certs/ca.zip ]; then
    #                 echo "Creating CA";
    #                 bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
    #                 unzip config/certs/ca.zip -d config/certs;
    #             fi;
    #             if [ ! -f config/certs/certs.zip ]; then
    #                 echo "Creating certs";
    #                 echo -ne \
    #                 "instances:\n"\
    #                 "  - name: es01\n"\
    #                 "    dns:\n"\
    #                 "      - es01\n"\
    #                 "      - localhost\n"\
    #                 "    ip:\n"\
    #                 "      - 127.0.0.1\n"\
    #                 "  - name: kibana\n"\
    #                 "    dns:\n"\
    #                 "      - kibana\n"\
    #                 "      - localhost\n"\
    #                 "    ip:\n"\
    #                 "      - 127.0.0.1\n"\
    #                 "  - name: fleet-server\n"\
    #                 "    dns:\n"\
    #                 "      - fleet-server\n"\
    #                 "      - localhost\n"\
    #                 "    ip:\n"\
    #                 "      - 127.0.0.1\n"\
    #                 > config/certs/instances.yml;
    #                 bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
    #                 unzip config/certs/certs.zip -d config/certs;
    #             fi;
    #             echo "Setting file permissions"
    #             chown -R root:root config/certs;
    #             find . -type d -exec chmod 750 \{\} \;;
    #             find . -type f -exec chmod 640 \{\} \;;
    #             echo "Waiting for Elasticsearch availability";
    #             until curl -s http://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
    #             echo "Setting kibana_system password";
    #             until curl -s -X POST -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" http://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
    #             echo "All done!";
    #         '
    #     healthcheck:
    #         test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
    #         interval: 1s
    #         timeout: 5s
    #         retries: 120
    #     networks:
    #         - elastic

    # es01:
    #     depends_on:
    #         setup:
    #             condition: service_healthy
    #     image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    #     labels:
    #         co.elastic.logs/module: elasticsearch
    #     volumes:
    #         - certs:/usr/share/elasticsearch/config/certs
    #         - esdata01:/usr/share/elasticsearch/data
    #     ports:
    #         - ${ES_PORT}:9200
    #     environment:
    #         - node.name=es01
    #         - cluster.name=${CLUSTER_NAME}
    #         - discovery.type=single-node
    #         - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    #         - bootstrap.memory_lock=true
    #         - xpack.security.enabled=true
    #         - xpack.security.http.ssl.enabled=false
    #         - xpack.security.transport.ssl.enabled=false
    #         - xpack.license.self_generated.type=${LICENSE}
    #     ulimits:
    #         memlock:
    #             soft: -1
    #             hard: -1
    #     healthcheck:
    #         test:
    #             [
    #                 "CMD-SHELL",
    #                 "curl -s http://localhost:9200 | grep -q 'missing authentication credentials'",
    #             ]
    #         interval: 10s
    #         timeout: 10s
    #         retries: 120
    #     networks:
    #         - elastic

    # kibana:
    #     depends_on:
    #         es01:
    #             condition: service_healthy
    #     image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    #     labels:
    #         co.elastic.logs/module: kibana
    #     volumes:
    #         - certs:/usr/share/kibana/config/certs
    #         - kibanadata:/usr/share/kibana/data
    #         - ./kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    #     ports:
    #         - ${KIBANA_PORT}:5601
    #     environment:
    #         - SERVERNAME=kibana
    #         - ELASTICSEARCH_HOSTS=http://es01:9200
    #         - ELASTICSEARCH_USERNAME=kibana_system
    #         - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    #         - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    #         - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    #         - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    #         - XPACK_REPORTING_KIBANASERVER_HOSTNAME=localhost
    #         - SERVER_SSL_ENABLED=false
    #         - ELASTIC_APM_SECRET_TOKEN=${ELASTIC_APM_SECRET_TOKEN}
    #     healthcheck:
    #         test:
    #             [
    #                 "CMD-SHELL",
    #                 "curl -I -s http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
    #             ]
    #         interval: 10s
    #         timeout: 10s
    #         retries: 120
    #     networks:
    #         - elastic

    # fleet-server:
    #     depends_on:
    #         kibana:
    #             condition: service_healthy
    #         es01:
    #             condition: service_healthy
    #     image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    #     volumes:
    #         - certs:/certs
    #         - fleetserverdata:/usr/share/elastic-agent
    #         - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
    #         - "/var/run/docker.sock:/var/run/docker.sock:ro"
    #         - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
    #         - "/proc:/hostfs/proc:ro"
    #         - "/:/hostfs:ro"
    #     ports:
    #         - ${FLEET_PORT}:8220
    #         - ${APMSERVER_PORT}:8200
    #     user: root
    #     environment:
    #         - SSL_CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
    #         - CERTIFICATE_AUTHORITIES=/certs/ca/ca.crt
    #         - FLEET_CA=/certs/ca/ca.crt
    #         - FLEET_ENROLL=1
    #         - FLEET_INSECURE=true
    #         - FLEET_SERVER_ELASTICSEARCH_CA=/certs/ca/ca.crt
    #         - FLEET_SERVER_ELASTICSEARCH_HOST=http://es01:9200
    #         - FLEET_SERVER_ELASTICSEARCH_INSECURE=true
    #         - FLEET_SERVER_ENABLE=1
    #         - FLEET_SERVER_CERT=/certs/fleet-server/fleet-server.crt
    #         - FLEET_SERVER_CERT_KEY=/certs/fleet-server/fleet-server.key
    #         - FLEET_SERVER_INSECURE_HTTP=true
    #         - FLEET_SERVER_POLICY_ID=fleet-server-policy
    #         - FLEET_URL=https://fleet-server:8220
    #         - KIBANA_FLEET_CA=/certs/ca/ca.crt
    #         - KIBANA_FLEET_SETUP=1
    #         - KIBANA_FLEET_USERNAME=elastic
    #         - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
    #         - KIBANA_HOST=http://kibana:5601
    #     networks:
    #         - elastic

    prometheus:
        container_name: prometheus_container
        image: prom/prometheus:latest
        volumes:
            - ./prometheus:/etc/prometheus
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
        ports:
            - "9090:9090"
        networks:
            - elastic
        healthcheck:
            test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 10s

    grafana:
        container_name: grafana_container
        image: grafana/grafana:latest
        volumes:
        - grafana_data:/var/lib/grafana
        environment:
        - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
        - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
        - GF_USERS_ALLOW_SIGN_UP=false
        ports:
        - "3000:3000"
        depends_on:
        - prometheus
        networks:
        - elastic

networks:
    elastic:
        driver: bridge

volumes:
    data:
    pgadmin:
    redis:
    rabbitmq_data:
    certs:
    esdata01:
    kibanadata:
    fleetserverdata:
    prometheus_data:
    grafana_data:
